generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  email          String     @unique
  password       String
  userType       UserType?  @default(User)
  isProfileSetUp Boolean    @default(false)
  expirationOtp  DateTime?
  otp            Int?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  agency         Agency[]
  landlord       Landlord[]
  tenant         Tenant[]

  @@map("Users")
}

model Agency {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  companyName String
  email       String
  phone       String
  userType    UserType?  @default(Agency)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String     @db.ObjectId
  user        User       @relation(fields: [userId], references: [id])
  property    Property[]

  @@map("Agency")
}

model Landlord {
  id                   String     @id @default(auto()) @map("_id") @db.ObjectId
  fullName             String
  emiratesIdOrPassport String
  email                String
  phone                String
  userType             UserType?  @default(Landlord)
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  userId               String     @db.ObjectId
  user                 User       @relation(fields: [userId], references: [id])
  property             Property[]

  @@map("Landlord")
}

model Tenant {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  fullName   String
  emiratesId String
  email      String
  phone      String
  userType   UserType?  @default(Tenant)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  userId     String     @db.ObjectId
  user       User       @relation(fields: [userId], references: [id])
  contract   Contract[]

  @@map("Tenant")
}

model Property {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  propertyName      String
  propertyType      String
  buildingName      String
  location          String
  maknaiNumber      String
  propertyArea      String
  totalFloor        Int
  totalRooms        Int
  description       String
  contractExpiresAt DateTime?
  isContractCreated Boolean    @default(false)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  landlordId        String?    @db.ObjectId
  agencyId          String?    @db.ObjectId
  landlord          Landlord?  @relation(fields: [landlordId], references: [id])
  agency            Agency?    @relation(fields: [agencyId], references: [id])
  contract          Contract[]

  @@map("Property")
}

model Contract {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  tenantName     String
  emiratesID     String
  email          String
  mobile         String
  startDate      DateTime
  endDate        DateTime
  deposit        Float
  payment        String
  numberPayments Int
  isDeleted      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  propertyId     String   @db.ObjectId
  tenantId       String   @db.ObjectId
  property       Property @relation(fields: [propertyId], references: [id])
  tenant         Tenant   @relation(fields: [tenantId], references: [id])

  @@map("Contract")
}

model Maintenance {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Maintenance")
}

enum UserType {
  User
  Agency
  Landlord
  Tenant
}
