generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  email          String     @unique
  password       String
  userType       UserType?  @default(User)
  isProfileSetUp Boolean    @default(false)
  expirationOtp  DateTime?
  otp            Int?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  agency         Agency[]
  landlord       Landlord[]
  tenant         Tenant[]

  @@map("Users")
}

model Agency {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  companyName String
  email       String
  phone       String
  userType    UserType?  @default(Agency)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String     @db.ObjectId
  user        User       @relation(fields: [userId], references: [id])
  property    Property[]
  Landlord    Landlord[]

  @@map("Agency")
}

model Landlord {
  id                   String     @id @default(auto()) @map("_id") @db.ObjectId
  fullName             String
  emiratesIdOrPassport String
  email                String
  phone                String
  userType             UserType?  @default(Landlord)
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  userId               String     @db.ObjectId
  agencyId             String?    @db.ObjectId
  user                 User       @relation(fields: [userId], references: [id])
  agency               Agency?    @relation(fields: [agencyId], references: [id])
  property             Property[]

  @@map("Landlord")
}

model Tenant {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  fullName    String
  emiratesId  String
  email       String
  phone       String
  userType    UserType?     @default(Tenant)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      String        @db.ObjectId
  user        User          @relation(fields: [userId], references: [id])
  contract    Contract[]
  maintenance Maintenance[]

  @@map("Tenant")
}

model Property {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  propertyName      String
  propertyType      String
  buildingName      String
  location          String
  maknaiNumber      String
  propertyArea      String
  totalFloor        Int
  totalRooms        Int
  description       String
  contractExpiresAt DateTime?
  isContractCreated Boolean       @default(false)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  landlordId        String        @db.ObjectId
  agencyId          String?       @db.ObjectId
  landlord          Landlord      @relation(fields: [landlordId], references: [id])
  agency            Agency?       @relation(fields: [agencyId], references: [id])
  contract          Contract[]
  maintenance       Maintenance[]
  expense           Expense[]
  document          Document[]
  payment           Payment[]

  @@map("Property")
}

model Contract {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  tenantName     String
  emiratesID     String
  email          String
  mobile         String
  startDate      DateTime
  endDate        DateTime
  totalRent      Float
  deposit        Float
  payment        String
  numberPayments Int
  isDeleted      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  propertyId     String   @db.ObjectId
  tenantId       String   @db.ObjectId
  property       Property @relation(fields: [propertyId], references: [id])
  tenant         Tenant   @relation(fields: [tenantId], references: [id])

  @@map("Contract")
}

model Maintenance {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  priority    PriorityLevel
  date        DateTime
  time        String
  image       String
  description String
  isCompleted Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  tenantId    String        @db.ObjectId
  propertyId  String        @db.ObjectId
  tenant      Tenant        @relation(fields: [tenantId], references: [id])
  property    Property      @relation(fields: [propertyId], references: [id])

  @@map("Maintenance")
}

model Expense {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  expenseAmount   Float
  expenseCategory String
  date            DateTime
  paymentMethod   String
  image           String
  description     String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  propertyId      String   @db.ObjectId
  property        Property @relation(fields: [propertyId], references: [id])

  @@map("Expense")
}

model Document {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  floorPlan  String   @default("")
  titleDeed  String   @default("")
  emiratesID String   @default("")
  passportID String   @default("")
  passport   String   @default("")
  visa       String   @default("")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  propertyId String   @db.ObjectId
  property   Property @relation(fields: [propertyId], references: [id])

  @@map("Document")
}

model Payment {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  paymentDetails PaymentDetail[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  propertyId     String          @db.ObjectId
  property       Property        @relation(fields: [propertyId], references: [id])

  @@map("Payment")
}

model PaymentDetail {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  amount    Float
  dueDate   DateTime
  status    PaymentStatus @default(Due)
  paymentId String        @db.ObjectId
  payment   Payment       @relation(fields: [paymentId], references: [id])
}

enum UserType {
  User
  Agency
  Landlord
  Tenant
}

enum PriorityLevel {
  Urgent
  Medium
  Low
}

enum PaymentStatus {
  Due
  Paid
}
